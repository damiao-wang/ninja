// Code generated by protoc-gen-go. DO NOT EDIT.
// source: article.proto

/*
Package blog is a generated protocol buffer package.

It is generated from these files:
	article.proto

It has these top-level messages:
	HelloReq
	HelloResp
	ExportInfoReq
	ExportInfoResp
	UploadReq
	UploadResp
*/
package blog

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HelloReq struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *HelloReq) Reset()                    { *m = HelloReq{} }
func (m *HelloReq) String() string            { return proto.CompactTextString(m) }
func (*HelloReq) ProtoMessage()               {}
func (*HelloReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HelloReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type HelloResp struct {
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
}

func (m *HelloResp) Reset()                    { *m = HelloResp{} }
func (m *HelloResp) String() string            { return proto.CompactTextString(m) }
func (*HelloResp) ProtoMessage()               {}
func (*HelloResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HelloResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type ExportInfoReq struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ExportInfoReq) Reset()                    { *m = ExportInfoReq{} }
func (m *ExportInfoReq) String() string            { return proto.CompactTextString(m) }
func (*ExportInfoReq) ProtoMessage()               {}
func (*ExportInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ExportInfoReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ExportInfoResp struct {
	ContentType string `protobuf:"bytes,1,opt,name=contentType" json:"contentType,omitempty"`
	Data        []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Filename    string `protobuf:"bytes,3,opt,name=filename" json:"filename,omitempty"`
}

func (m *ExportInfoResp) Reset()                    { *m = ExportInfoResp{} }
func (m *ExportInfoResp) String() string            { return proto.CompactTextString(m) }
func (*ExportInfoResp) ProtoMessage()               {}
func (*ExportInfoResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ExportInfoResp) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *ExportInfoResp) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ExportInfoResp) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

type UploadReq struct {
	Filename string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
	Data     []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *UploadReq) Reset()                    { *m = UploadReq{} }
func (m *UploadReq) String() string            { return proto.CompactTextString(m) }
func (*UploadReq) ProtoMessage()               {}
func (*UploadReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UploadReq) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *UploadReq) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type UploadResp struct {
}

func (m *UploadResp) Reset()                    { *m = UploadResp{} }
func (m *UploadResp) String() string            { return proto.CompactTextString(m) }
func (*UploadResp) ProtoMessage()               {}
func (*UploadResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*HelloReq)(nil), "blog.HelloReq")
	proto.RegisterType((*HelloResp)(nil), "blog.HelloResp")
	proto.RegisterType((*ExportInfoReq)(nil), "blog.ExportInfoReq")
	proto.RegisterType((*ExportInfoResp)(nil), "blog.ExportInfoResp")
	proto.RegisterType((*UploadReq)(nil), "blog.UploadReq")
	proto.RegisterType((*UploadResp)(nil), "blog.UploadResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Article service

type ArticleClient interface {
	Hello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloResp, error)
	Upload(ctx context.Context, in *UploadReq, opts ...grpc.CallOption) (*UploadResp, error)
}

type articleClient struct {
	cc *grpc.ClientConn
}

func NewArticleClient(cc *grpc.ClientConn) ArticleClient {
	return &articleClient{cc}
}

func (c *articleClient) Hello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloResp, error) {
	out := new(HelloResp)
	err := grpc.Invoke(ctx, "/blog.Article/Hello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) Upload(ctx context.Context, in *UploadReq, opts ...grpc.CallOption) (*UploadResp, error) {
	out := new(UploadResp)
	err := grpc.Invoke(ctx, "/blog.Article/Upload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Article service

type ArticleServer interface {
	Hello(context.Context, *HelloReq) (*HelloResp, error)
	Upload(context.Context, *UploadReq) (*UploadResp, error)
}

func RegisterArticleServer(s *grpc.Server, srv ArticleServer) {
	s.RegisterService(&_Article_serviceDesc, srv)
}

func _Article_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.Article/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).Hello(ctx, req.(*HelloReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.Article/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).Upload(ctx, req.(*UploadReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Article_serviceDesc = grpc.ServiceDesc{
	ServiceName: "blog.Article",
	HandlerType: (*ArticleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _Article_Hello_Handler,
		},
		{
			MethodName: "Upload",
			Handler:    _Article_Upload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "article.proto",
}

func init() { proto.RegisterFile("article.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x4f, 0x4b, 0xc4, 0x30,
	0x10, 0xc5, 0x89, 0xbb, 0xae, 0xdb, 0x71, 0x77, 0x5d, 0xe6, 0xb4, 0x14, 0x94, 0x12, 0x2f, 0x05,
	0xa1, 0x07, 0x3d, 0x7a, 0xf2, 0x20, 0xe8, 0xb5, 0xe8, 0xdd, 0x74, 0x37, 0x2d, 0x85, 0x34, 0x19,
	0x9b, 0x1c, 0xf4, 0xdb, 0x4b, 0xd2, 0x3f, 0xb4, 0xe0, 0xde, 0x66, 0xe6, 0xbd, 0xf9, 0x31, 0x79,
	0x81, 0xad, 0x68, 0x5d, 0x7d, 0x54, 0x32, 0xa3, 0xd6, 0x38, 0x83, 0xcb, 0x42, 0x99, 0x8a, 0xdf,
	0xc1, 0xfa, 0x4d, 0x2a, 0x65, 0x72, 0xf9, 0x8d, 0x08, 0x4b, 0x2d, 0x1a, 0x79, 0x60, 0x09, 0x4b,
	0xa3, 0x3c, 0xd4, 0xfc, 0x16, 0xa2, 0x5e, 0xb7, 0x84, 0x7b, 0x58, 0x34, 0xb6, 0xea, 0x75, 0x5f,
	0xf2, 0x7b, 0xd8, 0xbe, 0xfe, 0x90, 0x69, 0xdd, 0xbb, 0x2e, 0xcf, 0x32, 0x0a, 0xd8, 0x4d, 0x4d,
	0x96, 0x30, 0x81, 0xeb, 0xa3, 0xd1, 0x4e, 0x6a, 0xf7, 0xf1, 0x4b, 0x83, 0x79, 0x3a, 0xf2, 0x9c,
	0x93, 0x70, 0xe2, 0x70, 0x91, 0xb0, 0x74, 0x93, 0x87, 0x1a, 0x63, 0x58, 0x97, 0xb5, 0x92, 0x81,
	0xbf, 0x08, 0x2b, 0x63, 0xcf, 0x9f, 0x21, 0xfa, 0x24, 0x65, 0xc4, 0xc9, 0x1f, 0x31, 0x35, 0xb2,
	0xb9, 0xf1, 0x3f, 0x30, 0xdf, 0x00, 0x0c, 0xcb, 0x96, 0x1e, 0xbf, 0xe0, 0xea, 0xa5, 0x4b, 0x0a,
	0x53, 0xb8, 0x0c, 0xaf, 0xc7, 0x5d, 0xe6, 0xd3, 0xca, 0x86, 0xa8, 0xe2, 0x9b, 0x59, 0x6f, 0x09,
	0x1f, 0x60, 0xd5, 0x21, 0xb0, 0x97, 0xc6, 0x6b, 0xe2, 0xfd, 0x7c, 0x60, 0xa9, 0x58, 0x85, 0x1f,
	0x78, 0xfa, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x1f, 0xa3, 0x11, 0x72, 0x92, 0x01, 0x00, 0x00,
}
